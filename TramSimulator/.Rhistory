data <- read.csv("runtimes.csv",H=T)
data <- read.csv("runtimes.csv",header=T)
str(data)
data <- read.csv("runtimes.csv",header=T,sep=";")
str(data)
station_avgs <- apply(data, mean)
station_avgs <- apply(data, FUN=mean)
station_avgs <- apply(data, margin = 1,FUN=mean)
station_avgs <- apply(data, MARGIN = 1,FUN=mean)
str(station_avgs)
Filter(function(x) any(vapply(x[0], FUN = function(y) y > x[1])), c(data, station_avgs))
vapply?
s
?vapply
Filter(function(x) any(lapply(x[0], FUN = function(y) y > x[1])), c(data, station_avgs))
Filter(function(x) any(lapply(x[0], FUN = function(y) y > x[1])), c(data, station_avgs))[0]
Filter(function(x) any(lapply(x[0], FUN = function(y) y > x[1])), c(data, station_avgs))[0][0]
str(Filter(function(x) any(lapply(x[0], FUN = function(y) y > x[1])), c(data, station_avgs)))
Filter(function(x) any(lapply(x[0], FUN = function(y) y > x[1])), c(data, station_avgs))
station_avgs[0]
station_avgs[1]
Filter(function(x) any(lapply(x, FUN = function(y) x$y > station_avgs$y)), data)
Filter(function(x) any(lapply(x, FUN = function(y) paste(x,y) > paste(station_avgs,y))), data)
names(station_avgs)
apply(data, FUN=function(x) mean(x))
apply(data, MARGIN=1,FUN=function(x) mean(x))
str(apply(data, MARGIN=1,FUN=function(x) mean(x)))
?apply
colnames(data)
apply(data, MARGIN=1,FUN=function(x) mean(x), DROP=FALSE)
apply(data, MARGIN=1,FUN=function(x) mean(x), drop=FALSE)
as.data.frame(station_avgs,col.names = colnames(data))
str(as.data.frame(station_avgs,col.names = colnames(data)))
str(as.data.frame(station_avgs,row.names = colnames(data)))
colnames(data)
?as.data.frame
str(as.data.frame(station_avgs,row.names = colnames(data),optional=TRUE))
s <- as.data.frame(station_avgs,row.names = colnames(data),optional=T)
station_avgs(data,MARGIN=2,FUN=function(x) mean(x))
station_avgs <- apply(data,MARGIN=2,FUN=function(x) mean(x))
station_avgs
Filter(function(x) any(lapply(x, FUN = function(y) paste(x,y) > paste(station_avgs,y))), data)
Filter(function(x) any(lapply(x, FUN = function(y) x$y > paste(station_avgs,y))), data)
seq_along(c(5,4,2,1))
Filter(function(x) any(lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y]), data)
s
Filter(function(x) any(lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])), data)
str(Filter(function(x) any(lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])), data))
str(data)
?lapply
?lapply
lapply(data, FUN=id)
lapply(data, FUN=function(x)x)
str(lapply(data, FUN=function(x)x))
Filter(function(x) x[1] == 149, data)
?Filter
Filter(function(x) any(lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])), data
)
data[1]
data[2]
filter(function(x) any(lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])), data)
where(function(x) any(lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])), data)
install.packages("SparkR")
lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])), data)
lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y]), data)
lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y]))
lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])
apply(data,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y]))
apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y]))
str(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])))
str(apply(data,MARGIN=2,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[y] > station_avgs[y])))
str(apply(data,MARGIN=2,FUN=function(x) lapply(seq_along(x), FUN = function(y)y)
)
str(apply(data,MARGIN=2,FUN=function(x) lapply(seq_along(x), FUN = function(y)y))
)
str(apply(data,MARGIN=2,FUN=function(x) lapply(seq_along(x), FUN = function(y)y)))
str(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y)y)))
str(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[y])))
str(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]])))
str(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]] > station_avgs[[y]])))
str(data[apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]] > station_avgs[[y]])), ])
is.Vector(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]] > station_avgs[[y]])))
is.vector(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]] > station_avgs[[y]])))
lvec <- apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]] > station_avgs[[y]]))
str(lvec)
is.vector(lvec)
data[lvec,]
data[,lvec]
data[unlist(lvec),]
str(data[unlist(lvec),])
unlist(vector)
unlist(lvec)
lvec
str(apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]] > station_avgs[[y]])))
lvec <- apply(data,MARGIN=1,FUN=function(x) lapply(seq_along(x), FUN = function(y) x[[y]] > station_avgs[[y]]))
str(lvec)
lvec_reduced <- Filter(function(x) all(x), lvec)
:t lvec_reduced
lvec_reduced
str(Filter(function(x) all(x), lvec))
warnings()
apply(lvec,MARGIN=1,FUN=function(x) all(x))
lapply(lvec,FUN=function(x) all(x))
warnings()
apply(lvec,MARGIN=1,FUN=function(x) all(x))
lvec
str(lvec)
dim(lvec)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
str(lvec)
is.vector(lvec)
lapply(lvec,all)
warnings()
row <- data[1,]
str(row)
row[[4]]
row[[3]]
seq_along(x)
seq_along(row)
lapply(lvec,FUN=function(x) all(x[[1]]))
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
lvec[[1]][[1]]
lvec[[1]]
all(lvec)
all(lvec[[1]])
all(lvec[[1]][[1]])
all(unlist(lvec[[1]]))
unlist(lvec[[1]])
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
lvec_reduced
lvec[[1259]]
lvec[[1258]]
data[unlist(lvec_reduced),]
str(data[unlist(lvec_reduced),])
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
str(data_reduced)
data_avg = apply(data_reduced, MARGIN=1, FUN=function(x)mean(x))
data_avg <- apply(data_reduced, MARGIN=1, FUN=function(x)mean(x))
str(data_avg)
ks.test(data_avg, "pnum")
shapiro.test(data_avg)
plot(data_avg)
str(data_reduced)
ks.test(data_reduced,"pnorm")
ks.test(data_reduced,"punif")
chisq.test(data_reduced)
fit.weibull <- fitdist(data_reduced,"weibull")
install.packages(fitdistrplus)
"fitdistrplus"
install.packages("fitdistrplus")
library(fitdistrplus)
library(logspline)
fit.weibull <- fitdist(data_reduced,"weibull")
str(data_reduced)
data_summed <- apply(data_reduced,MARGIN=1,FUN=function(x)sum(x))
str(data_summed)
fit.weibull <- fitdist(data_summed,"weibull")
fit.weibull
fit.norm <- fitdist(data_summed,"norm")
fit.norm
plot(fit.norm)
plot(fit.weibull)
qqplot(data_summed)
qqpnorm(data_summed)
qqnorm(data_summed)
qqline(data_summed)
hist(data_summed)
fitdist(data_summed,"lognormal")
fitdist(data_summed,"lnormal")
fitdist(data_summed,"lnorm")
fit.lnorm <- fitdist(data_summed,"lnorm")
plot(fit.lnorm)
plot(fit.norm)
plot(fit.norm)
plot(fit.weibull)
plot(fit.norm)
plot(fit.lnorm)
plot(fit.norm)
dlnorm(data_summed)
median(data_summed)
mean(data_summed)
descdist(data_summed,discrete=F,boot=500)
fitdist(data_summed)
install.packages("goft")
lnorm.test(data_summed)
library(goft)
lnorm.test(data_summed)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
lnorm.test(data_summed)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
lnorm.test(data_summed)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
lnorm.test(data_summed)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
lnorm.test(data_summed)
qqnorm(data_summed)
qqline(data_summed)
fitdist(data_summed,"lnorm")
fit.lnorm <- fitdist(data_summed,"lnorm")
plot(fit.lnorm)
fit.norm <- fitdist(data_summed,"norm")
plot(fit.norm)
plot(fit.lnorm)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
fit.lnorm <- fitdist(data_summed,"lnorm")
plot(fit.lnorm)
shapiro.test(data_summed)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
shapiro.test(data_summed)
ks.test(data_summed, "norm")
ks.test(data_summed, "pnorm")
ks.test(data_summed, "plnorm")
chisq.test(data_summed)
fit.lnorm <- fitdist(data_summed, "lnorm")
plot(fit.lnorm)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
plot(fit.weibull)
plot(fit.lnorm)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
plot(fit.lnorm)
str(data_summed)
plot(fit.norm)
var(data_summed)
sqrt(1870.579)
sd(data_summed)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
variance
data_summed
plot(fit.lnorm)
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
source('~/University/ASD/Simulation/TramSimulator/runningtimes.R')
average
average/variance
